const express = require('express');const bodyParser = require('body-parser');const { randomBytes } = require('crypto');const axios = require('axios');const cors = require('cors');const app = express();app.use(bodyParser.json());app.use(cors());const commentsByPostId = {};app.get('/posts/:id/comments', (req, res) => {  const id = req.params.id;  const result = commentsByPostId[id];  const comments = result.sort((item1, item2) => {    return new Date(item2.date) - new Date(item1.date);  })  res.send(comments || []);});app.post('/posts/:id/comments', async (req, res) => {  const commentId = randomBytes(4).toString('hex');  const { content, date } = req.body;  const comments = commentsByPostId[req.params.id] || [];  comments.push({ id: commentId, content, date, status: 'pending' });  commentsByPostId[req.params.id] = comments;  await axios.post('http://event-bus-srv:4005/events', {    type: 'CommentCreated',    data: {      id: commentId,      content,      date,      postId: req.params.id,      status: 'pending'    }  });  res.status(201).send(comments);});app.post('/events', async (req, res) => {  console.log('Received Event', req.body.type);  const { type, data } = req.body;  if (type === 'CommentModerated') {    const { postId, id , status, content } = data;    const comments = commentsByPostId[postId];    const comment = comments.find(comment => {      return comment.id === id;    })    comment.status = status;    await axios.post('http://event-bus-srv:4005/events', {      type: 'CommentUpdated',      data: {        id,        content,        postId,        status      }    });  }  res.send({});})app.listen('4001', () => {  console.log('Comments service is listening on port 4001');});